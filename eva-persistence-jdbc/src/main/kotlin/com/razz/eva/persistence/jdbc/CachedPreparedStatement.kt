package com.razz.eva.persistence.jdbc

import java.sql.PreparedStatement
import java.sql.SQLType

internal class CachedPreparedStatement(
    private val delegate: PreparedStatement,
) : PreparedStatement by delegate {

    override fun close() {
        // no-op as Hikari keeps track of open statements per connection session (get from pool - return to pool)
        // and upon returning connection to pool, closes all open statements,
        // while keeping underlying connection opened
    }

    // actually close the statement when connection is closed, managed by CachingConnection
    fun recycle() {
        delegate.close()
    }

    // Default methods are not delegated

    override fun getLargeUpdateCount(): Long {
        return delegate.getLargeUpdateCount()
    }

    override fun setLargeMaxRows(max: Long) {
        delegate.setLargeMaxRows(max)
    }

    override fun getLargeMaxRows(): Long {
        return delegate.getLargeMaxRows()
    }

    override fun executeLargeBatch(): LongArray? {
        return delegate.executeLargeBatch()
    }

    override fun executeLargeUpdate(sql: String?): Long {
        return delegate.executeLargeUpdate(sql)
    }

    override fun executeLargeUpdate(sql: String?, autoGeneratedKeys: Int): Long {
        return delegate.executeLargeUpdate(sql, autoGeneratedKeys)
    }

    override fun executeLargeUpdate(sql: String?, columnIndexes: IntArray?): Long {
        return delegate.executeLargeUpdate(sql, columnIndexes)
    }

    override fun executeLargeUpdate(
        sql: String?,
        columnNames: Array<out String?>?,
    ): Long {
        return delegate.executeLargeUpdate(sql, columnNames)
    }

    override fun enquoteLiteral(`val`: String?): String? {
        return delegate.enquoteLiteral(`val`)
    }

    override fun enquoteIdentifier(identifier: String?, alwaysQuote: Boolean): String? {
        return delegate.enquoteIdentifier(identifier, alwaysQuote)
    }

    override fun isSimpleIdentifier(identifier: String?): Boolean {
        return delegate.isSimpleIdentifier(identifier)
    }

    override fun enquoteNCharLiteral(`val`: String?): String? {
        return delegate.enquoteNCharLiteral(`val`)
    }

    override fun setObject(
        parameterIndex: Int,
        x: Any?,
        targetSqlType: SQLType?,
        scaleOrLength: Int,
    ) {
        delegate.setObject(parameterIndex, x, targetSqlType, scaleOrLength)
    }

    override fun setObject(parameterIndex: Int, x: Any?, targetSqlType: SQLType?) {
        delegate.setObject(parameterIndex, x, targetSqlType)
    }

    override fun executeLargeUpdate(): Long {
        return delegate.executeLargeUpdate()
    }
}
