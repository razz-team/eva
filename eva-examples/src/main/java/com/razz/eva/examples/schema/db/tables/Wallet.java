/*
 * This file is generated by jOOQ.
 */
package com.razz.eva.examples.schema.db.tables;


import com.razz.eva.examples.schema.db.DefaultSchema;
import com.razz.eva.examples.schema.db.tables.records.WalletRecord;
import com.razz.jooq.converter.InstantConverter;
import org.jooq.Record;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import javax.annotation.processing.Generated;
import java.sql.Timestamp;
import java.time.Instant;
import java.util.UUID;


/**
 * This class is generated by jOOQ.
 */
@Generated(
        value = {
                "https://www.jooq.org",
                "jOOQ version:3.16.6",
                "schema version:001"
        },
        comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Wallet extends TableImpl<WalletRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>wallet</code>
     */
    public static final Wallet WALLET = new Wallet();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<WalletRecord> getRecordType() {
        return WalletRecord.class;
    }

    /**
     * The column <code>wallet.id</code>.
     */
    public final TableField<WalletRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>wallet.currency</code>.
     */
    public final TableField<WalletRecord, String> CURRENCY = createField(DSL.name("currency"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>wallet.amount</code>.
     */
    public final TableField<WalletRecord, Long> AMOUNT = createField(DSL.name("amount"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>wallet.expire_at</code>.
     */
    public final TableField<WalletRecord, Instant> EXPIRE_AT = createField(DSL.name("expire_at"), SQLDataType.TIMESTAMP(6).nullable(false), this, "", new InstantConverter());

    /**
     * The column <code>wallet.record_updated_at</code>.
     */
    public final TableField<WalletRecord, Instant> RECORD_UPDATED_AT = createField(DSL.name("record_updated_at"), SQLDataType.TIMESTAMP(6).nullable(false), this, "", new InstantConverter());

    /**
     * The column <code>wallet.record_created_at</code>.
     */
    public final TableField<WalletRecord, Instant> RECORD_CREATED_AT = createField(DSL.name("record_created_at"), SQLDataType.TIMESTAMP(6).nullable(false), this, "", new InstantConverter());

    /**
     * The column <code>wallet.version</code>.
     */
    public final TableField<WalletRecord, Long> VERSION = createField(DSL.name("version"), SQLDataType.BIGINT.nullable(false), this, "");

    private Wallet(Name alias, Table<WalletRecord> aliased) {
        this(alias, aliased, null);
    }

    private Wallet(Name alias, Table<WalletRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>wallet</code> table reference
     */
    public Wallet(String alias) {
        this(DSL.name(alias), WALLET);
    }

    /**
     * Create an aliased <code>wallet</code> table reference
     */
    public Wallet(Name alias) {
        this(alias, WALLET);
    }

    /**
     * Create a <code>wallet</code> table reference
     */
    public Wallet() {
        this(DSL.name("wallet"), null);
    }

    public <O extends Record> Wallet(Table<O> child, ForeignKey<O, WalletRecord> key) {
        super(child, key, WALLET);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public TableField<WalletRecord, Long> getRecordVersion() {
        return VERSION;
    }

    @Override
    public Wallet as(String alias) {
        return new Wallet(DSL.name(alias), this);
    }

    @Override
    public Wallet as(Name alias) {
        return new Wallet(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Wallet rename(String name) {
        return new Wallet(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Wallet rename(Name name) {
        return new Wallet(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<UUID, String, Long, Timestamp, Instant, Instant, Long> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
