/*
 * This file is generated by jOOQ.
 */
package com.razz.eva.test.schema.tables;


import com.razz.eva.test.schema.DefaultSchema;
import com.razz.eva.test.schema.Indexes;
import com.razz.eva.test.schema.Keys;
import com.razz.eva.test.schema.tables.records.EmployeesRecord;
import com.razz.jooq.converter.InstantConverter;
import org.jooq.Record;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import javax.annotation.processing.Generated;
import java.time.Instant;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.16.5",
        "schema version:004"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Employees extends TableImpl<EmployeesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>employees</code>
     */
    public static final Employees EMPLOYEES = new Employees();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EmployeesRecord> getRecordType() {
        return EmployeesRecord.class;
    }

    /**
     * The column <code>employees.id</code>.
     */
    public final TableField<EmployeesRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>employees.first_name</code>.
     */
    public final TableField<EmployeesRecord, String> FIRST_NAME = createField(DSL.name("first_name"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>employees.last_name</code>.
     */
    public final TableField<EmployeesRecord, String> LAST_NAME = createField(DSL.name("last_name"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>employees.department_id</code>.
     */
    public final TableField<EmployeesRecord, UUID> DEPARTMENT_ID = createField(DSL.name("department_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>employees.email</code>.
     */
    public final TableField<EmployeesRecord, String> EMAIL = createField(DSL.name("email"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>employees.ration</code>.
     */
    public final TableField<EmployeesRecord, String> RATION = createField(DSL.name("ration"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>employees.record_updated_at</code>.
     */
    public final TableField<EmployeesRecord, Instant> RECORD_UPDATED_AT = createField(DSL.name("record_updated_at"), SQLDataType.TIMESTAMP(6).nullable(false), this, "", new InstantConverter());

    /**
     * The column <code>employees.record_created_at</code>.
     */
    public final TableField<EmployeesRecord, Instant> RECORD_CREATED_AT = createField(DSL.name("record_created_at"), SQLDataType.TIMESTAMP(6).nullable(false), this, "", new InstantConverter());

    /**
     * The column <code>employees.version</code>.
     */
    public final TableField<EmployeesRecord, Long> VERSION = createField(DSL.name("version"), SQLDataType.BIGINT.nullable(false), this, "");

    private Employees(Name alias, Table<EmployeesRecord> aliased) {
        this(alias, aliased, null);
    }

    private Employees(Name alias, Table<EmployeesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>employees</code> table reference
     */
    public Employees(String alias) {
        this(DSL.name(alias), EMPLOYEES);
    }

    /**
     * Create an aliased <code>employees</code> table reference
     */
    public Employees(Name alias) {
        this(alias, EMPLOYEES);
    }

    /**
     * Create a <code>employees</code> table reference
     */
    public Employees() {
        this(DSL.name("employees"), null);
    }

    public <O extends Record> Employees(Table<O> child, ForeignKey<O, EmployeesRecord> key) {
        super(child, key, EMPLOYEES);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.EMPLOYEES_EMAIL_IDX, Indexes.EMPLOYEES_NAME_IDX);
    }

    @Override
    public UniqueKey<EmployeesRecord> getPrimaryKey() {
        return Keys.EMPLOYEES_PKEY;
    }

    @Override
    public List<ForeignKey<EmployeesRecord, ?>> getReferences() {
        return Arrays.asList(Keys.EMPLOYEES__EMPLOYEES_DEPARTMENT_ID_FKEY);
    }

    private transient Departments _departments;

    /**
     * Get the implicit join path to the
     * <code>eva_test_db_schema_jooq_gen.departments</code> table.
     */
    public Departments departments() {
        if (_departments == null)
            _departments = new Departments(this, Keys.EMPLOYEES__EMPLOYEES_DEPARTMENT_ID_FKEY);

        return _departments;
    }

    @Override
    public List<Check<EmployeesRecord>> getChecks() {
        return Arrays.asList(
            Internal.createCheck(this, DSL.name("employees_first_name_len_check"), "((length(first_name) <= 20))", true)
        );
    }

    @Override
    public TableField<EmployeesRecord, Long> getRecordVersion() {
        return VERSION;
    }

    @Override
    public Employees as(String alias) {
        return new Employees(DSL.name(alias), this);
    }

    @Override
    public Employees as(Name alias) {
        return new Employees(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Employees rename(String name) {
        return new Employees(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Employees rename(Name name) {
        return new Employees(name, null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<UUID, String, String, UUID, String, String, Instant, Instant, Long> fieldsRow() {
        return (Row9) super.fieldsRow();
    }
}
