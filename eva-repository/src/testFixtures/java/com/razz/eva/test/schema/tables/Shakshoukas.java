/*
 * This file is generated by jOOQ.
 */
package com.razz.eva.test.schema.tables;


import com.razz.eva.test.schema.DefaultSchema;
import com.razz.eva.test.schema.Indexes;
import com.razz.eva.test.schema.Keys;
import com.razz.eva.test.schema.enums.ShakshoukasState;
import com.razz.eva.test.schema.tables.records.ShakshoukasRecord;
import com.razz.jooq.converter.InstantConverter;
import org.jooq.Record;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import javax.annotation.processing.Generated;
import java.time.Instant;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.16.5",
        "schema version:004"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Shakshoukas extends TableImpl<ShakshoukasRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>shakshoukas</code>
     */
    public static final Shakshoukas SHAKSHOUKAS = new Shakshoukas();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ShakshoukasRecord> getRecordType() {
        return ShakshoukasRecord.class;
    }

    /**
     * The column <code>shakshoukas.id</code>.
     */
    public final TableField<ShakshoukasRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>shakshoukas.employee_id</code>.
     */
    public final TableField<ShakshoukasRecord, UUID> EMPLOYEE_ID = createField(DSL.name("employee_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>shakshoukas.state</code>.
     */
    public final TableField<ShakshoukasRecord, ShakshoukasState> STATE = createField(DSL.name("state"), SQLDataType.VARCHAR.nullable(false).asEnumDataType(ShakshoukasState.class), this, "");

    /**
     * The column <code>shakshoukas.eggs_count</code>.
     */
    public final TableField<ShakshoukasRecord, String> EGGS_COUNT = createField(DSL.name("eggs_count"), SQLDataType.VARCHAR(30).nullable(false), this, "");

    /**
     * The column <code>shakshoukas.with_pita</code>.
     */
    public final TableField<ShakshoukasRecord, Boolean> WITH_PITA = createField(DSL.name("with_pita"), SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>shakshoukas.record_updated_at</code>.
     */
    public final TableField<ShakshoukasRecord, Instant> RECORD_UPDATED_AT = createField(DSL.name("record_updated_at"), SQLDataType.TIMESTAMP(6).nullable(false), this, "", new InstantConverter());

    /**
     * The column <code>shakshoukas.record_created_at</code>.
     */
    public final TableField<ShakshoukasRecord, Instant> RECORD_CREATED_AT = createField(DSL.name("record_created_at"), SQLDataType.TIMESTAMP(6).nullable(false), this, "", new InstantConverter());

    /**
     * The column <code>shakshoukas.version</code>.
     */
    public final TableField<ShakshoukasRecord, Long> VERSION = createField(DSL.name("version"), SQLDataType.BIGINT.nullable(false), this, "");

    private Shakshoukas(Name alias, Table<ShakshoukasRecord> aliased) {
        this(alias, aliased, null);
    }

    private Shakshoukas(Name alias, Table<ShakshoukasRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>shakshoukas</code> table reference
     */
    public Shakshoukas(String alias) {
        this(DSL.name(alias), SHAKSHOUKAS);
    }

    /**
     * Create an aliased <code>shakshoukas</code> table reference
     */
    public Shakshoukas(Name alias) {
        this(alias, SHAKSHOUKAS);
    }

    /**
     * Create a <code>shakshoukas</code> table reference
     */
    public Shakshoukas() {
        this(DSL.name("shakshoukas"), null);
    }

    public <O extends Record> Shakshoukas(Table<O> child, ForeignKey<O, ShakshoukasRecord> key) {
        super(child, key, SHAKSHOUKAS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.SHAKSHOUKAS_EMPLOYEE_ID_NON_CONSUMED);
    }

    @Override
    public UniqueKey<ShakshoukasRecord> getPrimaryKey() {
        return Keys.SHAKSHOUKAS_PKEY;
    }

    @Override
    public TableField<ShakshoukasRecord, Long> getRecordVersion() {
        return VERSION;
    }

    @Override
    public Shakshoukas as(String alias) {
        return new Shakshoukas(DSL.name(alias), this);
    }

    @Override
    public Shakshoukas as(Name alias) {
        return new Shakshoukas(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Shakshoukas rename(String name) {
        return new Shakshoukas(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Shakshoukas rename(Name name) {
        return new Shakshoukas(name, null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<UUID, UUID, ShakshoukasState, String, Boolean, Instant, Instant, Long> fieldsRow() {
        return (Row8) super.fieldsRow();
    }
}
