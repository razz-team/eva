/*
 * This file is generated by jOOQ.
 */
package com.razz.eva.test.schema.tables.records;


import com.razz.eva.test.schema.enums.DepartmentsState;
import com.razz.eva.test.schema.tables.Departments;
import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record9;
import org.jooq.Row9;
import org.jooq.impl.UpdatableRecordImpl;

import javax.annotation.processing.Generated;
import java.time.Instant;
import java.util.UUID;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.16.5",
        "schema version:004"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DepartmentsRecord extends UpdatableRecordImpl<DepartmentsRecord> implements com.razz.jooq.record.TypedStatefulEntityRecord<UUID, DepartmentsState>, Record9<UUID, String, UUID, Integer, String, DepartmentsState, Instant, Instant, Long> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>departments.id</code>.
     */
    public DepartmentsRecord setId(UUID value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>departments.id</code>.
     */
    public UUID getId() {
        return (UUID) get(0);
    }

    /**
     * Setter for <code>departments.name</code>.
     */
    public DepartmentsRecord setName(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>departments.name</code>.
     */
    public String getName() {
        return (String) get(1);
    }

    /**
     * Setter for <code>departments.boss</code>.
     */
    public DepartmentsRecord setBoss(UUID value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>departments.boss</code>.
     */
    public UUID getBoss() {
        return (UUID) get(2);
    }

    /**
     * Setter for <code>departments.headcount</code>.
     */
    public DepartmentsRecord setHeadcount(Integer value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>departments.headcount</code>.
     */
    public Integer getHeadcount() {
        return (Integer) get(3);
    }

    /**
     * Setter for <code>departments.ration</code>.
     */
    public DepartmentsRecord setRation(String value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>departments.ration</code>.
     */
    public String getRation() {
        return (String) get(4);
    }

    /**
     * Setter for <code>departments.state</code>.
     */
    public DepartmentsRecord setState(DepartmentsState value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>departments.state</code>.
     */
    public DepartmentsState getState() {
        return (DepartmentsState) get(5);
    }

    /**
     * Setter for <code>departments.record_updated_at</code>.
     */
    public DepartmentsRecord setRecordUpdatedAt(Instant value) {
        set(6, value);
        return this;
    }

    /**
     * Getter for <code>departments.record_updated_at</code>.
     */
    public Instant getRecordUpdatedAt() {
        return (Instant) get(6);
    }

    /**
     * Setter for <code>departments.record_created_at</code>.
     */
    public DepartmentsRecord setRecordCreatedAt(Instant value) {
        set(7, value);
        return this;
    }

    /**
     * Getter for <code>departments.record_created_at</code>.
     */
    public Instant getRecordCreatedAt() {
        return (Instant) get(7);
    }

    /**
     * Setter for <code>departments.version</code>.
     */
    public DepartmentsRecord setVersion(Long value) {
        set(8, value);
        return this;
    }

    /**
     * Getter for <code>departments.version</code>.
     */
    public Long getVersion() {
        return (Long) get(8);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<UUID> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record9 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row9<UUID, String, UUID, Integer, String, DepartmentsState, Instant, Instant, Long> fieldsRow() {
        return (Row9) super.fieldsRow();
    }

    @Override
    public Row9<UUID, String, UUID, Integer, String, DepartmentsState, Instant, Instant, Long> valuesRow() {
        return (Row9) super.valuesRow();
    }

    @Override
    public Field<UUID> field1() {
        return Departments.DEPARTMENTS.ID;
    }

    @Override
    public Field<String> field2() {
        return Departments.DEPARTMENTS.NAME;
    }

    @Override
    public Field<UUID> field3() {
        return Departments.DEPARTMENTS.BOSS;
    }

    @Override
    public Field<Integer> field4() {
        return Departments.DEPARTMENTS.HEADCOUNT;
    }

    @Override
    public Field<String> field5() {
        return Departments.DEPARTMENTS.RATION;
    }

    @Override
    public Field<DepartmentsState> field6() {
        return Departments.DEPARTMENTS.STATE;
    }

    @Override
    public Field<Instant> field7() {
        return Departments.DEPARTMENTS.RECORD_UPDATED_AT;
    }

    @Override
    public Field<Instant> field8() {
        return Departments.DEPARTMENTS.RECORD_CREATED_AT;
    }

    @Override
    public Field<Long> field9() {
        return Departments.DEPARTMENTS.VERSION;
    }

    @Override
    public UUID component1() {
        return getId();
    }

    @Override
    public String component2() {
        return getName();
    }

    @Override
    public UUID component3() {
        return getBoss();
    }

    @Override
    public Integer component4() {
        return getHeadcount();
    }

    @Override
    public String component5() {
        return getRation();
    }

    @Override
    public DepartmentsState component6() {
        return getState();
    }

    @Override
    public Instant component7() {
        return getRecordUpdatedAt();
    }

    @Override
    public Instant component8() {
        return getRecordCreatedAt();
    }

    @Override
    public Long component9() {
        return getVersion();
    }

    @Override
    public UUID value1() {
        return getId();
    }

    @Override
    public String value2() {
        return getName();
    }

    @Override
    public UUID value3() {
        return getBoss();
    }

    @Override
    public Integer value4() {
        return getHeadcount();
    }

    @Override
    public String value5() {
        return getRation();
    }

    @Override
    public DepartmentsState value6() {
        return getState();
    }

    @Override
    public Instant value7() {
        return getRecordUpdatedAt();
    }

    @Override
    public Instant value8() {
        return getRecordCreatedAt();
    }

    @Override
    public Long value9() {
        return getVersion();
    }

    @Override
    public DepartmentsRecord value1(UUID value) {
        setId(value);
        return this;
    }

    @Override
    public DepartmentsRecord value2(String value) {
        setName(value);
        return this;
    }

    @Override
    public DepartmentsRecord value3(UUID value) {
        setBoss(value);
        return this;
    }

    @Override
    public DepartmentsRecord value4(Integer value) {
        setHeadcount(value);
        return this;
    }

    @Override
    public DepartmentsRecord value5(String value) {
        setRation(value);
        return this;
    }

    @Override
    public DepartmentsRecord value6(DepartmentsState value) {
        setState(value);
        return this;
    }

    @Override
    public DepartmentsRecord value7(Instant value) {
        setRecordUpdatedAt(value);
        return this;
    }

    @Override
    public DepartmentsRecord value8(Instant value) {
        setRecordCreatedAt(value);
        return this;
    }

    @Override
    public DepartmentsRecord value9(Long value) {
        setVersion(value);
        return this;
    }

    @Override
    public DepartmentsRecord values(UUID value1, String value2, UUID value3, Integer value4, String value5, DepartmentsState value6, Instant value7, Instant value8, Long value9) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        value9(value9);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached DepartmentsRecord
     */
    public DepartmentsRecord() {
        super(Departments.DEPARTMENTS);
    }

    /**
     * Create a detached, initialised DepartmentsRecord
     */
    public DepartmentsRecord(UUID id, String name, UUID boss, Integer headcount, String ration, DepartmentsState state, Instant recordUpdatedAt, Instant recordCreatedAt, Long version) {
        super(Departments.DEPARTMENTS);

        setId(id);
        setName(name);
        setBoss(boss);
        setHeadcount(headcount);
        setRation(ration);
        setState(state);
        setRecordUpdatedAt(recordUpdatedAt);
        setRecordCreatedAt(recordCreatedAt);
        setVersion(version);
    }
}
